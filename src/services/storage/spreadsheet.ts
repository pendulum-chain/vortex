import { GoogleSpreadsheet, GoogleSpreadsheetWorksheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';

interface GoogleCredentials {
  email: string;
  key: string;
}

const SCOPES = [
  'https://www.googleapis.com/auth/spreadsheets',
  // 'https://www.googleapis.com/auth/drive.file',
];

export async function initGoogleSpreadsheet(
  sheetId: string,
  googleCredentials: GoogleCredentials,
  headerValues?: string[],
) {
  // Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
  if (!googleCredentials.email || !googleCredentials.key) {
    throw new Error('Missing some google credentials');
  }

  const serviceAccountAuth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: googleCredentials.email,
    key: googleCredentials.key,
    scopes: SCOPES,
  });

  const doc = new GoogleSpreadsheet(sheetId, serviceAccountAuth);
  try {
    await doc.loadInfo();
  } catch (error) {
    console.error(`Error loading Google Spreadsheet ${sheetId}:`, error);
    throw error;
  }

  let sheet = doc.sheetsByIndex[0];
  // Check if doc doesn't have header already
  if (headerValues) {
    const rowCount = sheet.rowCount;
    // Check if the first row is our header values
    if (rowCount > 0) {
      const rows = await sheet.getRows({ limit: 1 });
      if (rows.length > 0) {
        const firstRow = rows[0];
        const firstRowValues = Object.values(firstRow);
        if (firstRowValues.join(',') !== headerValues.join(',')) {
          // Create a new sheet with the header values
          sheet = await doc.addSheet({ headerValues });
        }
      }
    } else {
      await sheet.setHeaderRow(headerValues);
    }
  }

  return sheet;
}

export async function appendData(sheet: GoogleSpreadsheetWorksheet, data: Record<string, string>) {
  await sheet.addRow(data);
}
